@startuml

class Subscriber {
	- string URI
	- string playerName

	+ string GetURI()
	+ string GetPlayerName()
	+ CallbackClient GetCallbackClient()
	+ void CallbackClientConnect()
	+ bool PublishToClient()
}

Subscriber *-- CallbackClient
ComParent <|-- CallbackClient

class PubSubService {
	- List<string> clientChannels
	- Dictionary<string, List<Subscriber>>

	- void AddSubscriberToChannel()
	+ void CreateChannel()
	+ bool Subscribe()
	+ bool Unsubscribe()
	+ bool PublishGameStateUpdate()
	+ bool ProcessClientStateUpdate()
}

GameStateManager *-- PubSubService
PubSubService *-- ComServiceServer

ClientStateManager *-- PubSubClient
PubSubClient *-- ComClient
ClientStateManager *-- CallbackServiceServer
CallbackServiceServer *-- CallbackService
ComServiceParent <|-- CallbackService
NetworkServiceBase <|-- ComServiceParent
ComParent <|-- ComClient

class GameStateManager {
	+ bool ProcessClientStateUpdate()
}

class ClientStateManager {
	+ void JoinGame()
	+ bool SendDeckSize()
}

class PubSubClient {
	+ bool ClientConnect()
	+ bool Subscribe()
	+ bool Unsubscribe()
	+ bool SendClientStateUpdate()
}

note "Implements stubs for RPC calls" as N1
NetworkServiceClient .. N1
NetworkServiceClient ..[hidden] N1

class NetworkServiceClient {
	+ PingReply PingService(PingRequest)
	+ SubscribeReply Subscribe(SubscribeRequest)
	+ ClientStateUpdateReply ClientStateUpdate(ClientStateUpdateRequest)
}

class NetworkServiceBase {
	+ //PingReply PingService(PingRequest)//
	+ //SubscribeReply Subscribe(SubscribeRequest)//
	+ //ClientStateUpdateReply ClientStateUpdate(ClientStateUpdateRequest)//
}

class ComClient {
	+ bool Subscribe()
	+ bool ClientStateUpdate()
}

class ComServiceServer {
	+ void StartService()
	+ void StopService()
}


note "Implements only those RPC calls supported by the service" as N2
ComService .. N2
CallbackService .. N2

class ComService {
	+ SubscribeReply Subscribe(SubscribeRequest)
	+ ClientStateUpdateReply ClientStateUpdate(ClientStateUpdateRequest)
}

ComServiceServer *-- ComService
ComServiceParent <|-- ComService

class CallbackServiceServer {
	+ void StartService()
	+ void StopService()
	+ bool UpdateClientGameStateView()
}

class CallbackService {
	+ GameStateUpdateReply GameStateUpdate(GameStateUpdateRequest)
}

class CallbackClient {
	+ bool GameStateUpdate()
}

ComParent *-- NetworkServiceClient

class ComParent {
	+ bool PingService()
}

class ComServiceParent {
	+ PingReply PingService(PingRequest)
}

@enduml