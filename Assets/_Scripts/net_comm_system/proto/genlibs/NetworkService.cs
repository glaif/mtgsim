// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Assets/_Scripts/net_comm_system/proto/NetworkService.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetworkService {

  /// <summary>Holder for reflection information generated from Assets/_Scripts/net_comm_system/proto/NetworkService.proto</summary>
  public static partial class NetworkServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for Assets/_Scripts/net_comm_system/proto/NetworkService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetworkServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjpBc3NldHMvX1NjcmlwdHMvbmV0X2NvbW1fc3lzdGVtL3Byb3RvL05ldHdv",
            "cmtTZXJ2aWNlLnByb3RvEg5OZXR3b3JrU2VydmljZSIbCgtQaW5nUmVxdWVz",
            "dBIMCgRuYW1lGAEgASgJIj0KCVBpbmdSZXBseRIwCgdyZXNDb2RlGAEgASgO",
            "Mh8uTmV0d29ya1NlcnZpY2UuUGluZ1JlcGx5U3RhdHVzIlQKEFN1YnNjcmli",
            "ZVJlcXVlc3QSEgoKcGxheWVyTmFtZRgBIAEoCRIsCgdjaGFubmVsGAIgASgO",
            "MhsuTmV0d29ya1NlcnZpY2UuQ2hhbm5lbFR5cGUiRwoOU3Vic2NyaWJlUmVw",
            "bHkSNQoHcmVzQ29kZRgBIAEoDjIkLk5ldHdvcmtTZXJ2aWNlLlN1YnNjcmli",
            "ZVJlcGx5U3RhdHVzIk0KGEdhbWVTdGF0ZVVwZGF0ZVBhcmFtVHlwZRITCglj",
            "YXJkQ291bnQYASABKAVIABISCghtdWxsaWdhbhgCIAEoCEgAQggKBnBhcmFt",
            "cyLoAQoWR2FtZVN0YXRlVXBkYXRlUmVxdWVzdBIxCgR0eXBlGAEgASgOMiMu",
            "TmV0d29ya1NlcnZpY2UuR2FtZVN0YXRlVXBkYXRlVHlwZRJCCgZwYXJhbXMY",
            "AiADKAsyMi5OZXR3b3JrU2VydmljZS5HYW1lU3RhdGVVcGRhdGVSZXF1ZXN0",
            "LlBhcmFtc0VudHJ5GlcKC1BhcmFtc0VudHJ5EgsKA2tleRgBIAEoCRI3CgV2",
            "YWx1ZRgCIAEoCzIoLk5ldHdvcmtTZXJ2aWNlLkdhbWVTdGF0ZVVwZGF0ZVBh",
            "cmFtVHlwZToCOAEiUwoUR2FtZVN0YXRlVXBkYXRlUmVwbHkSOwoHcmVzQ29k",
            "ZRgBIAEoDjIqLk5ldHdvcmtTZXJ2aWNlLkdhbWVTdGF0ZVVwZGF0ZVJlcGx5",
            "U3RhdHVzIkoKBFBhaXISMwoDa2V5GAEgASgOMiYuTmV0d29ya1NlcnZpY2Uu",
            "Q2xpZW50U3RhdGVVcGRhdGVQYXJhbRINCgV2YWx1ZRgCIAEoCSIxCgpEaWN0",
            "aW9uYXJ5EiMKBXBhaXJzGAEgAygLMhQuTmV0d29ya1NlcnZpY2UuUGFpciJ/",
            "ChhDbGllbnRTdGF0ZVVwZGF0ZVJlcXVlc3QSMwoEdHlwZRgBIAEoDjIlLk5l",
            "dHdvcmtTZXJ2aWNlLkNsaWVudFN0YXRlVXBkYXRlVHlwZRIuCgp1cGRhdGVW",
            "YWxzGAIgASgLMhouTmV0d29ya1NlcnZpY2UuRGljdGlvbmFyeSJXChZDbGll",
            "bnRTdGF0ZVVwZGF0ZVJlcGx5Ej0KB3Jlc0NvZGUYASABKA4yLC5OZXR3b3Jr",
            "U2VydmljZS5DbGllbnRTdGF0ZVVwZGF0ZVJlcGx5U3RhdHVzKksKD1BpbmdS",
            "ZXBseVN0YXR1cxIbChdQSU5HUkVQTFlTVEFUVVNfU1VDQ0VTUxAAEhsKF1BJ",
            "TkdSRVBMWVNUQVRVU19GQUlMVVJFEGMqWgoUU3Vic2NyaWJlUmVwbHlTdGF0",
            "dXMSIAocU1VCU0NSSUJFUkVQTFlTVEFUVVNfU1VDQ0VTUxAAEiAKHFNVQlND",
            "UklCRVJFUExZU1RBVFVTX0ZBSUxVUkUQYypFCgtDaGFubmVsVHlwZRIZChVD",
            "SEFOTkVMVFlQRV9HQU1FU1RBVEUQABIbChdDSEFOTkVMVFlQRV9DTElFTlRT",
            "VEFURRABKjQKE0dhbWVTdGF0ZVVwZGF0ZVR5cGUSHQoZR0FNRVNUQVRFVVBE",
            "QVRFVFlQRV9QSEFTRRAAKmsKGkdhbWVTdGF0ZVVwZGF0ZVJlcGx5U3RhdHVz",
            "EiYKIkdBTUVTVEFURVJFVVBEQVRFUExZU1RBVFVTX1NVQ0NFU1MQABIlCiFB",
            "TUVTVEFURVJFVVBEQVRFUExZU1RBVFVTX0ZBSUxVUkUQYypaChVDbGllbnRT",
            "dGF0ZVVwZGF0ZVR5cGUSIQodQ0xJRU5UU1RBVEVVUERBVEVUWVBFX0RFRkFV",
            "TFQQABIeChpDTElFTlRTVEFURVVQREFURVRZUEVfTlVMTBBjKo4BChZDbGll",
            "bnRTdGF0ZVVwZGF0ZVBhcmFtEigKJENMSUVOVFNUQVRFVVBEQVRFUEFSQU1U",
            "WVBFX0NBUkRDT1VOVBAAEiYKIkNMSUVOVFNUQVRFVVBEQVRFQVJBTVRZUEVf",
            "TVVMTElHQU4QARIiCh5DTElFTlRTVEFURVVQREFURUFSQU1UWVBFX05VTEwQ",
            "YypyChxDbGllbnRTdGF0ZVVwZGF0ZVJlcGx5U3RhdHVzEigKJENMSUVOVFNU",
            "QVRFVVBEQVRFUkVQTFlTVEFUVVNfU1VDQ0VTUxAAEigKJENMSUVOVFNUQVRF",
            "VVBEQVRFUkVQTFlTVEFUVVNfRkFJTFVSRRBjMvYCCg5OZXR3b3JrU2Vydmlj",
            "ZRJHCgtQaW5nU2VydmljZRIbLk5ldHdvcmtTZXJ2aWNlLlBpbmdSZXF1ZXN0",
            "GhkuTmV0d29ya1NlcnZpY2UuUGluZ1JlcGx5IgASTwoJU3Vic2NyaWJlEiAu",
            "TmV0d29ya1NlcnZpY2UuU3Vic2NyaWJlUmVxdWVzdBoeLk5ldHdvcmtTZXJ2",
            "aWNlLlN1YnNjcmliZVJlcGx5IgASYQoPR2FtZVN0YXRlVXBkYXRlEiYuTmV0",
            "d29ya1NlcnZpY2UuR2FtZVN0YXRlVXBkYXRlUmVxdWVzdBokLk5ldHdvcmtT",
            "ZXJ2aWNlLkdhbWVTdGF0ZVVwZGF0ZVJlcGx5IgASZwoRQ2xpZW50U3RhdGVV",
            "cGRhdGUSKC5OZXR3b3JrU2VydmljZS5DbGllbnRTdGF0ZVVwZGF0ZVJlcXVl",
            "c3QaJi5OZXR3b3JrU2VydmljZS5DbGllbnRTdGF0ZVVwZGF0ZVJlcGx5IgBi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::NetworkService.PingReplyStatus), typeof(global::NetworkService.SubscribeReplyStatus), typeof(global::NetworkService.ChannelType), typeof(global::NetworkService.GameStateUpdateType), typeof(global::NetworkService.GameStateUpdateReplyStatus), typeof(global::NetworkService.ClientStateUpdateType), typeof(global::NetworkService.ClientStateUpdateParam), typeof(global::NetworkService.ClientStateUpdateReplyStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.PingRequest), global::NetworkService.PingRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.PingReply), global::NetworkService.PingReply.Parser, new[]{ "ResCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.SubscribeRequest), global::NetworkService.SubscribeRequest.Parser, new[]{ "PlayerName", "Channel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.SubscribeReply), global::NetworkService.SubscribeReply.Parser, new[]{ "ResCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.GameStateUpdateParamType), global::NetworkService.GameStateUpdateParamType.Parser, new[]{ "CardCount", "Mulligan" }, new[]{ "Params" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.GameStateUpdateRequest), global::NetworkService.GameStateUpdateRequest.Parser, new[]{ "Type", "Params" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.GameStateUpdateReply), global::NetworkService.GameStateUpdateReply.Parser, new[]{ "ResCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.Pair), global::NetworkService.Pair.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.Dictionary), global::NetworkService.Dictionary.Parser, new[]{ "Pairs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.ClientStateUpdateRequest), global::NetworkService.ClientStateUpdateRequest.Parser, new[]{ "Type", "UpdateVals" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.ClientStateUpdateReply), global::NetworkService.ClientStateUpdateReply.Parser, new[]{ "ResCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PingReplyStatus {
    [pbr::OriginalName("PINGREPLYSTATUS_SUCCESS")] Success = 0,
    [pbr::OriginalName("PINGREPLYSTATUS_FAILURE")] Failure = 99,
  }

  public enum SubscribeReplyStatus {
    [pbr::OriginalName("SUBSCRIBEREPLYSTATUS_SUCCESS")] Success = 0,
    [pbr::OriginalName("SUBSCRIBEREPLYSTATUS_FAILURE")] Failure = 99,
  }

  public enum ChannelType {
    [pbr::OriginalName("CHANNELTYPE_GAMESTATE")] Gamestate = 0,
    [pbr::OriginalName("CHANNELTYPE_CLIENTSTATE")] Clientstate = 1,
  }

  public enum GameStateUpdateType {
    [pbr::OriginalName("GAMESTATEUPDATETYPE_PHASE")] Phase = 0,
  }

  public enum GameStateUpdateReplyStatus {
    [pbr::OriginalName("GAMESTATEREUPDATEPLYSTATUS_SUCCESS")] GamestatereupdateplystatusSuccess = 0,
    [pbr::OriginalName("AMESTATEREUPDATEPLYSTATUS_FAILURE")] AmestatereupdateplystatusFailure = 99,
  }

  public enum ClientStateUpdateType {
    [pbr::OriginalName("CLIENTSTATEUPDATETYPE_DEFAULT")] Default = 0,
    [pbr::OriginalName("CLIENTSTATEUPDATETYPE_NULL")] Null = 99,
  }

  public enum ClientStateUpdateParam {
    [pbr::OriginalName("CLIENTSTATEUPDATEPARAMTYPE_CARDCOUNT")] TypeCardcount = 0,
    [pbr::OriginalName("CLIENTSTATEUPDATEARAMTYPE_MULLIGAN")] ClientstateupdatearamtypeMulligan = 1,
    [pbr::OriginalName("CLIENTSTATEUPDATEARAMTYPE_NULL")] ClientstateupdatearamtypeNull = 99,
  }

  public enum ClientStateUpdateReplyStatus {
    [pbr::OriginalName("CLIENTSTATEUPDATEREPLYSTATUS_SUCCESS")] Success = 0,
    [pbr::OriginalName("CLIENTSTATEUPDATEREPLYSTATUS_FAILURE")] Failure = 99,
  }

  #endregion

  #region Messages
  /// <summary>
  /// The request message containing the user's name.
  /// </summary>
  public sealed partial class PingRequest : pb::IMessage<PingRequest> {
    private static readonly pb::MessageParser<PingRequest> _parser = new pb::MessageParser<PingRequest>(() => new PingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest(PingRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest Clone() {
      return new PingRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The response message containing the greetings
  /// </summary>
  public sealed partial class PingReply : pb::IMessage<PingReply> {
    private static readonly pb::MessageParser<PingReply> _parser = new pb::MessageParser<PingReply>(() => new PingReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingReply(PingReply other) : this() {
      resCode_ = other.resCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingReply Clone() {
      return new PingReply(this);
    }

    /// <summary>Field number for the "resCode" field.</summary>
    public const int ResCodeFieldNumber = 1;
    private global::NetworkService.PingReplyStatus resCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetworkService.PingReplyStatus ResCode {
      get { return resCode_; }
      set {
        resCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResCode != other.ResCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResCode != 0) hash ^= ResCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ResCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingReply other) {
      if (other == null) {
        return;
      }
      if (other.ResCode != 0) {
        ResCode = other.ResCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            resCode_ = (global::NetworkService.PingReplyStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscribeRequest : pb::IMessage<SubscribeRequest> {
    private static readonly pb::MessageParser<SubscribeRequest> _parser = new pb::MessageParser<SubscribeRequest>(() => new SubscribeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeRequest(SubscribeRequest other) : this() {
      playerName_ = other.playerName_;
      channel_ = other.channel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeRequest Clone() {
      return new SubscribeRequest(this);
    }

    /// <summary>Field number for the "playerName" field.</summary>
    public const int PlayerNameFieldNumber = 1;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private global::NetworkService.ChannelType channel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetworkService.ChannelType Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerName != other.PlayerName) return false;
      if (Channel != other.Channel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerName);
      }
      if (Channel != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Channel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Channel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerName = input.ReadString();
            break;
          }
          case 16: {
            channel_ = (global::NetworkService.ChannelType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscribeReply : pb::IMessage<SubscribeReply> {
    private static readonly pb::MessageParser<SubscribeReply> _parser = new pb::MessageParser<SubscribeReply>(() => new SubscribeReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeReply(SubscribeReply other) : this() {
      resCode_ = other.resCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeReply Clone() {
      return new SubscribeReply(this);
    }

    /// <summary>Field number for the "resCode" field.</summary>
    public const int ResCodeFieldNumber = 1;
    private global::NetworkService.SubscribeReplyStatus resCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetworkService.SubscribeReplyStatus ResCode {
      get { return resCode_; }
      set {
        resCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResCode != other.ResCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResCode != 0) hash ^= ResCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ResCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeReply other) {
      if (other == null) {
        return;
      }
      if (other.ResCode != 0) {
        ResCode = other.ResCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            resCode_ = (global::NetworkService.SubscribeReplyStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameStateUpdateParamType : pb::IMessage<GameStateUpdateParamType> {
    private static readonly pb::MessageParser<GameStateUpdateParamType> _parser = new pb::MessageParser<GameStateUpdateParamType>(() => new GameStateUpdateParamType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStateUpdateParamType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStateUpdateParamType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStateUpdateParamType(GameStateUpdateParamType other) : this() {
      switch (other.ParamsCase) {
        case ParamsOneofCase.CardCount:
          CardCount = other.CardCount;
          break;
        case ParamsOneofCase.Mulligan:
          Mulligan = other.Mulligan;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStateUpdateParamType Clone() {
      return new GameStateUpdateParamType(this);
    }

    /// <summary>Field number for the "cardCount" field.</summary>
    public const int CardCountFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardCount {
      get { return paramsCase_ == ParamsOneofCase.CardCount ? (int) params_ : 0; }
      set {
        params_ = value;
        paramsCase_ = ParamsOneofCase.CardCount;
      }
    }

    /// <summary>Field number for the "mulligan" field.</summary>
    public const int MulliganFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mulligan {
      get { return paramsCase_ == ParamsOneofCase.Mulligan ? (bool) params_ : false; }
      set {
        params_ = value;
        paramsCase_ = ParamsOneofCase.Mulligan;
      }
    }

    private object params_;
    /// <summary>Enum of possible cases for the "params" oneof.</summary>
    public enum ParamsOneofCase {
      None = 0,
      CardCount = 1,
      Mulligan = 2,
    }
    private ParamsOneofCase paramsCase_ = ParamsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamsOneofCase ParamsCase {
      get { return paramsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParams() {
      paramsCase_ = ParamsOneofCase.None;
      params_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameStateUpdateParamType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStateUpdateParamType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardCount != other.CardCount) return false;
      if (Mulligan != other.Mulligan) return false;
      if (ParamsCase != other.ParamsCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (paramsCase_ == ParamsOneofCase.CardCount) hash ^= CardCount.GetHashCode();
      if (paramsCase_ == ParamsOneofCase.Mulligan) hash ^= Mulligan.GetHashCode();
      hash ^= (int) paramsCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (paramsCase_ == ParamsOneofCase.CardCount) {
        output.WriteRawTag(8);
        output.WriteInt32(CardCount);
      }
      if (paramsCase_ == ParamsOneofCase.Mulligan) {
        output.WriteRawTag(16);
        output.WriteBool(Mulligan);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (paramsCase_ == ParamsOneofCase.CardCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardCount);
      }
      if (paramsCase_ == ParamsOneofCase.Mulligan) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStateUpdateParamType other) {
      if (other == null) {
        return;
      }
      switch (other.ParamsCase) {
        case ParamsOneofCase.CardCount:
          CardCount = other.CardCount;
          break;
        case ParamsOneofCase.Mulligan:
          Mulligan = other.Mulligan;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardCount = input.ReadInt32();
            break;
          }
          case 16: {
            Mulligan = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameStateUpdateRequest : pb::IMessage<GameStateUpdateRequest> {
    private static readonly pb::MessageParser<GameStateUpdateRequest> _parser = new pb::MessageParser<GameStateUpdateRequest>(() => new GameStateUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStateUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStateUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStateUpdateRequest(GameStateUpdateRequest other) : this() {
      type_ = other.type_;
      params_ = other.params_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStateUpdateRequest Clone() {
      return new GameStateUpdateRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::NetworkService.GameStateUpdateType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetworkService.GameStateUpdateType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pbc::MapField<string, global::NetworkService.GameStateUpdateParamType>.Codec _map_params_codec
        = new pbc::MapField<string, global::NetworkService.GameStateUpdateParamType>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::NetworkService.GameStateUpdateParamType.Parser), 18);
    private readonly pbc::MapField<string, global::NetworkService.GameStateUpdateParamType> params_ = new pbc::MapField<string, global::NetworkService.GameStateUpdateParamType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::NetworkService.GameStateUpdateParamType> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameStateUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStateUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!Params.Equals(other.Params)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= Params.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      params_.WriteTo(output, _map_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += params_.CalculateSize(_map_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStateUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      params_.Add(other.params_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::NetworkService.GameStateUpdateType) input.ReadEnum();
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameStateUpdateReply : pb::IMessage<GameStateUpdateReply> {
    private static readonly pb::MessageParser<GameStateUpdateReply> _parser = new pb::MessageParser<GameStateUpdateReply>(() => new GameStateUpdateReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStateUpdateReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStateUpdateReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStateUpdateReply(GameStateUpdateReply other) : this() {
      resCode_ = other.resCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStateUpdateReply Clone() {
      return new GameStateUpdateReply(this);
    }

    /// <summary>Field number for the "resCode" field.</summary>
    public const int ResCodeFieldNumber = 1;
    private global::NetworkService.GameStateUpdateReplyStatus resCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetworkService.GameStateUpdateReplyStatus ResCode {
      get { return resCode_; }
      set {
        resCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameStateUpdateReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStateUpdateReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResCode != other.ResCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResCode != 0) hash ^= ResCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ResCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStateUpdateReply other) {
      if (other == null) {
        return;
      }
      if (other.ResCode != 0) {
        ResCode = other.ResCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            resCode_ = (global::NetworkService.GameStateUpdateReplyStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pair : pb::IMessage<Pair> {
    private static readonly pb::MessageParser<Pair> _parser = new pb::MessageParser<Pair>(() => new Pair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair(Pair other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair Clone() {
      return new Pair(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::NetworkService.ClientStateUpdateParam key_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetworkService.ClientStateUpdateParam Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pair other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            key_ = (global::NetworkService.ClientStateUpdateParam) input.ReadEnum();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Dictionary : pb::IMessage<Dictionary> {
    private static readonly pb::MessageParser<Dictionary> _parser = new pb::MessageParser<Dictionary>(() => new Dictionary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dictionary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dictionary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dictionary(Dictionary other) : this() {
      pairs_ = other.pairs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dictionary Clone() {
      return new Dictionary(this);
    }

    /// <summary>Field number for the "pairs" field.</summary>
    public const int PairsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NetworkService.Pair> _repeated_pairs_codec
        = pb::FieldCodec.ForMessage(10, global::NetworkService.Pair.Parser);
    private readonly pbc::RepeatedField<global::NetworkService.Pair> pairs_ = new pbc::RepeatedField<global::NetworkService.Pair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetworkService.Pair> Pairs {
      get { return pairs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dictionary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dictionary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pairs_.Equals(other.pairs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pairs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pairs_.WriteTo(output, _repeated_pairs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pairs_.CalculateSize(_repeated_pairs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dictionary other) {
      if (other == null) {
        return;
      }
      pairs_.Add(other.pairs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pairs_.AddEntriesFrom(input, _repeated_pairs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientStateUpdateRequest : pb::IMessage<ClientStateUpdateRequest> {
    private static readonly pb::MessageParser<ClientStateUpdateRequest> _parser = new pb::MessageParser<ClientStateUpdateRequest>(() => new ClientStateUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientStateUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientStateUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientStateUpdateRequest(ClientStateUpdateRequest other) : this() {
      type_ = other.type_;
      UpdateVals = other.updateVals_ != null ? other.UpdateVals.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientStateUpdateRequest Clone() {
      return new ClientStateUpdateRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::NetworkService.ClientStateUpdateType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetworkService.ClientStateUpdateType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "updateVals" field.</summary>
    public const int UpdateValsFieldNumber = 2;
    private global::NetworkService.Dictionary updateVals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetworkService.Dictionary UpdateVals {
      get { return updateVals_; }
      set {
        updateVals_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientStateUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientStateUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(UpdateVals, other.UpdateVals)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (updateVals_ != null) hash ^= UpdateVals.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (updateVals_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateVals);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (updateVals_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateVals);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientStateUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.updateVals_ != null) {
        if (updateVals_ == null) {
          updateVals_ = new global::NetworkService.Dictionary();
        }
        UpdateVals.MergeFrom(other.UpdateVals);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::NetworkService.ClientStateUpdateType) input.ReadEnum();
            break;
          }
          case 18: {
            if (updateVals_ == null) {
              updateVals_ = new global::NetworkService.Dictionary();
            }
            input.ReadMessage(updateVals_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientStateUpdateReply : pb::IMessage<ClientStateUpdateReply> {
    private static readonly pb::MessageParser<ClientStateUpdateReply> _parser = new pb::MessageParser<ClientStateUpdateReply>(() => new ClientStateUpdateReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientStateUpdateReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientStateUpdateReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientStateUpdateReply(ClientStateUpdateReply other) : this() {
      resCode_ = other.resCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientStateUpdateReply Clone() {
      return new ClientStateUpdateReply(this);
    }

    /// <summary>Field number for the "resCode" field.</summary>
    public const int ResCodeFieldNumber = 1;
    private global::NetworkService.ClientStateUpdateReplyStatus resCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetworkService.ClientStateUpdateReplyStatus ResCode {
      get { return resCode_; }
      set {
        resCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientStateUpdateReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientStateUpdateReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResCode != other.ResCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResCode != 0) hash ^= ResCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ResCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientStateUpdateReply other) {
      if (other == null) {
        return;
      }
      if (other.ResCode != 0) {
        ResCode = other.ResCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            resCode_ = (global::NetworkService.ClientStateUpdateReplyStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
