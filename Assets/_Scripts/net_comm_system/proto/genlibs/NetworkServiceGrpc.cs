// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Assets/_Scripts/net_comm_system/proto/NetworkService.proto
// </auto-generated>
// Original file comments:
// packages\Grpc.Tools.1.11.0-pre2\tools\windows_x64\protoc.exe --csharp_out Assets\_Scripts\net_comm_system\proto\genlibs --grpc_out Assets\_Scripts\net_comm_system\proto\genlibs Assets\_Scripts\net_comm_system\proto\NetworkService.proto --plugin=protoc-gen-grpc=packages\Grpc.Tools.1.11.0-pre2\tools\windows_x64\grpc_csharp_plugin.exe
//
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace NetworkService {
  public static partial class NetworkService
  {
    static readonly string __ServiceName = "NetworkService.NetworkService";

    static readonly grpc::Marshaller<global::NetworkService.PingRequest> __Marshaller_PingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.PingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.PingReply> __Marshaller_PingReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.PingReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.SubscribeRequest> __Marshaller_SubscribeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.SubscribeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.SubscribeReply> __Marshaller_SubscribeReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.SubscribeReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.GameStateUpdateRequest> __Marshaller_GameStateUpdateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.GameStateUpdateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.GameStateUpdateReply> __Marshaller_GameStateUpdateReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.GameStateUpdateReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.ClientStateUpdateRequest> __Marshaller_ClientStateUpdateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.ClientStateUpdateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.ClientStateUpdateReply> __Marshaller_ClientStateUpdateReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.ClientStateUpdateReply.Parser.ParseFrom);

    static readonly grpc::Method<global::NetworkService.PingRequest, global::NetworkService.PingReply> __Method_PingService = new grpc::Method<global::NetworkService.PingRequest, global::NetworkService.PingReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PingService",
        __Marshaller_PingRequest,
        __Marshaller_PingReply);

    static readonly grpc::Method<global::NetworkService.SubscribeRequest, global::NetworkService.SubscribeReply> __Method_Subscribe = new grpc::Method<global::NetworkService.SubscribeRequest, global::NetworkService.SubscribeReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Subscribe",
        __Marshaller_SubscribeRequest,
        __Marshaller_SubscribeReply);

    static readonly grpc::Method<global::NetworkService.GameStateUpdateRequest, global::NetworkService.GameStateUpdateReply> __Method_GameStateUpdate = new grpc::Method<global::NetworkService.GameStateUpdateRequest, global::NetworkService.GameStateUpdateReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GameStateUpdate",
        __Marshaller_GameStateUpdateRequest,
        __Marshaller_GameStateUpdateReply);

    static readonly grpc::Method<global::NetworkService.ClientStateUpdateRequest, global::NetworkService.ClientStateUpdateReply> __Method_ClientStateUpdate = new grpc::Method<global::NetworkService.ClientStateUpdateRequest, global::NetworkService.ClientStateUpdateReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClientStateUpdate",
        __Marshaller_ClientStateUpdateRequest,
        __Marshaller_ClientStateUpdateReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::NetworkService.NetworkServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of NetworkService</summary>
    public abstract partial class NetworkServiceBase
    {
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NetworkService.PingReply> PingService(global::NetworkService.PingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscription request
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NetworkService.SubscribeReply> Subscribe(global::NetworkService.SubscribeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Send a game state update from master to client
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NetworkService.GameStateUpdateReply> GameStateUpdate(global::NetworkService.GameStateUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Send a client state update from client to master
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NetworkService.ClientStateUpdateReply> ClientStateUpdate(global::NetworkService.ClientStateUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NetworkService</summary>
    public partial class NetworkServiceClient : grpc::ClientBase<NetworkServiceClient>
    {
      /// <summary>Creates a new client for NetworkService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NetworkServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NetworkService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NetworkServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NetworkServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NetworkServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NetworkService.PingReply PingService(global::NetworkService.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingService(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NetworkService.PingReply PingService(global::NetworkService.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PingService, null, options, request);
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NetworkService.PingReply> PingServiceAsync(global::NetworkService.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingServiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NetworkService.PingReply> PingServiceAsync(global::NetworkService.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PingService, null, options, request);
      }
      /// <summary>
      /// Subscription request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NetworkService.SubscribeReply Subscribe(global::NetworkService.SubscribeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscription request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NetworkService.SubscribeReply Subscribe(global::NetworkService.SubscribeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Subscribe, null, options, request);
      }
      /// <summary>
      /// Subscription request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NetworkService.SubscribeReply> SubscribeAsync(global::NetworkService.SubscribeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscription request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NetworkService.SubscribeReply> SubscribeAsync(global::NetworkService.SubscribeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Subscribe, null, options, request);
      }
      /// <summary>
      /// Send a game state update from master to client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NetworkService.GameStateUpdateReply GameStateUpdate(global::NetworkService.GameStateUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GameStateUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send a game state update from master to client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NetworkService.GameStateUpdateReply GameStateUpdate(global::NetworkService.GameStateUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GameStateUpdate, null, options, request);
      }
      /// <summary>
      /// Send a game state update from master to client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NetworkService.GameStateUpdateReply> GameStateUpdateAsync(global::NetworkService.GameStateUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GameStateUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send a game state update from master to client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NetworkService.GameStateUpdateReply> GameStateUpdateAsync(global::NetworkService.GameStateUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GameStateUpdate, null, options, request);
      }
      /// <summary>
      /// Send a client state update from client to master
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NetworkService.ClientStateUpdateReply ClientStateUpdate(global::NetworkService.ClientStateUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClientStateUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send a client state update from client to master
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NetworkService.ClientStateUpdateReply ClientStateUpdate(global::NetworkService.ClientStateUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClientStateUpdate, null, options, request);
      }
      /// <summary>
      /// Send a client state update from client to master
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NetworkService.ClientStateUpdateReply> ClientStateUpdateAsync(global::NetworkService.ClientStateUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClientStateUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send a client state update from client to master
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NetworkService.ClientStateUpdateReply> ClientStateUpdateAsync(global::NetworkService.ClientStateUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClientStateUpdate, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NetworkServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NetworkServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NetworkServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_PingService, serviceImpl.PingService)
          .AddMethod(__Method_Subscribe, serviceImpl.Subscribe)
          .AddMethod(__Method_GameStateUpdate, serviceImpl.GameStateUpdate)
          .AddMethod(__Method_ClientStateUpdate, serviceImpl.ClientStateUpdate).Build();
    }

  }
}
#endregion
